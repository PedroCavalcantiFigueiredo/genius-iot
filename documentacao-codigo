Documentação do Projeto Genius com ESP8266

Introdução

Este projeto implementa um jogo de memória estilo "Genius" usando um ESP8266. O jogo utiliza LEDs, botões e um buzzer para fornecer feedback visual e sonoro. Além disso, o projeto publica mensagens em um broker MQTT para notificar o progresso do jogador.

Componentes Necessários

- ESP8266 (por exemplo, NodeMCU)
- 4 LEDs (vermelho, verde, amarelo e azul)
- 4 botões
- 1 buzzer
- Resistores para os LEDs e botões
- Protoboard e jumpers para conexões

Diagrama de Conexões


Pinos ESP8266 | Componentes
----------------------------
D0            | LED Vermelho
D1            | LED Verde
D2            | LED Amarelo
D3            | LED Azul
D4            | Buzzer
D5            | Botão Vermelho
D6            | Botão Verde
D7            | Botão Amarelo
D8            | Botão Azul


Configurações Iniciais

1. Rede WiFi:
    
    const char* ssid = "McCoyisKing_2.4GHz";
    const char* password = "euabraceioJoey";
    

2. Broker MQTT:
    
    const char* mqttServer = "91.121.93.94";
    const int mqttPort = 1883;
    const char* mqttClientName = "test.mosquitto.org";
    

Código Completo


#include <string>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// Definição dos pinos
#define pinLedVermelho D0
#define pinLedVerde D1
#define pinLedAmarelo D2
#define pinLedAzul D3
#define pinBuz D4
#define pinBotaoVermelho D5
#define pinBotaoVerde D6
#define pinBotaoAmarelo D7
#define pinBotaoAzul D8

// Variáveis globais
int sequencia[30] = {};
int botao[4] = {pinBotaoVermelho, pinBotaoVerde, pinBotaoAmarelo, pinBotaoAzul};
int sons[4] = {262, 294, 330, 349};
int led[4] = {pinLedVermelho, pinLedVerde, pinLedAmarelo, pinLedAzul};
int rodada = 0;
int verificador = 0;
int botao_pressionado = 0;
int tempo = 500;
bool apertou = false;
bool game_over = false;
char rodadaAtual[5];

// Credenciais WiFi
const char* ssid = "McCoyisKing_2.4GHz";
const char* password = "euabraceioJoey";

// Detalhes do broker MQTT
const char* mqttServer = "91.121.93.94";
const int mqttPort = 1883;
const char* mqttClientName = "test.mosquitto.org";

WiFiClient espClient;
PubSubClient client(espClient);

// Funções para configurar WiFi e MQTT
void setupWiFi() {
    delay(10);
    Serial.println();
    Serial.print("Connecting to ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
}

void setupMQTT() {
    client.setServer(mqttServer, mqttPort);
}

void reconnect() {
    while (!client.connected()) {
        Serial.print("Attempting MQTT connection...");
        if (client.connect(mqttClientName)) {
            Serial.println("connected");
        } else {
            Serial.print("failed, rc=");
            Serial.print(client.state());
            Serial.println(" try again in 5 seconds");
            delay(5000);
        }
    }
}

// Configuração inicial
void setup() {
    Serial.begin(9600);
    pinMode(pinBotaoVermelho, INPUT); // Botão 1
    pinMode(pinBotaoVerde, INPUT); // Botão 2
    pinMode(pinBotaoAmarelo, INPUT); // Botão 3
    pinMode(pinBotaoAzul, INPUT); // Botão 4
    pinMode(pinLedVermelho, OUTPUT); // LED 1
    pinMode(pinLedVerde, OUTPUT); // LED 2
    pinMode(pinLedAmarelo, OUTPUT); // LED 3
    pinMode(pinLedAzul, OUTPUT); // LED 4
    pinMode(pinBuz, OUTPUT); // Buzzer
    setupWiFi();
    setupMQTT();
}

// Loop principal
void loop() {
    if (!client.connected()) {
        reconnect();
    }
    client.loop();
    
    while (!apertou) {
        for (int i = 0; i <= 3; i++) {
            if (digitalRead(botao[i]) == HIGH) {
                apertou = true;
                delay(1000);
                digitalWrite(pinLedVermelho, HIGH);
                tone(pinBuz, 300);
                delay(1000);
                noTone(pinBuz);
                digitalWrite(pinLedVerde, HIGH);
                tone(pinBuz, 305);
                delay(1000);
                noTone(pinBuz);
                digitalWrite(pinLedAmarelo, HIGH);
                tone(pinBuz, 310);
                delay(1000);
                noTone(pinBuz);
                digitalWrite(pinLedAzul, HIGH);
                tone(pinBuz, 315);
                delay(1000);
                noTone(pinBuz);
                for (i = 0; i <= 3; i++) {
                    digitalWrite(led[i], LOW);
                }
                for (i = 1000; i >= 0; i--) {
                    tone(pinBuz, i);
                }
                noTone(pinBuz);
                delay(1000);
            }
        }
    }
    
    RodadaSeguinte();
    ContinuarSequencia();
    VezdoJogador();
    
    if (game_over) {
        sequencia[32] = {};
        rodada = 0;
        verificador = 0;
        game_over = false;
        apertou = false;
    } else {
        if (client.connected()) {
            client.publish("projetoPedro/Genius", "Parabéns você acertou!");
        }
    }
    delay(1000);
}

// Funções auxiliares

void RodadaSeguinte() {
    int aleatorio = random(4);
    sequencia[rodada] = aleatorio;
    rodada++;
    sprintf(rodadaAtual, "%d", rodada);
    if (client.connected()) {
        client.publish("projetoPedro/Genius", rodadaAtual);
    }
}

void ContinuarSequencia() {
    for (int i = 0; i < rodada; i++) {
        tone(pinBuz, sons[sequencia[i]]);
        digitalWrite(led[sequencia[i]], HIGH);
        delay(tempo);
        noTone(pinBuz);
        digitalWrite(led[sequencia[i]], LOW);
        delay(100);
    }
    if (rodada % 5 == 0) {
        tempo -= 50;
    }
}

void VezdoJogador() {
    for (int i = 0; i < rodada; i++) {
        bool jogada_efetuada = false;
        while (!jogada_efetuada) {
            for (int j = 0; j <= 3; j++) {
                if (digitalRead(botao[j]) == HIGH) {
                    botao_pressionado = j;
                    tone(pinBuz, sons[j]);
                    digitalWrite(led[j], HIGH);
                    delay(300);
                    digitalWrite(led[j], LOW);
                    noTone(pinBuz);
                    jogada_efetuada = true;
                }
            }
        }
        if (sequencia[verificador] != botao_pressionado) {
            for (int k = 0; k <= 3; k++) {
                tone(pinBuz, 70);
                digitalWrite(led[k], HIGH);
                delay(100);
                digitalWrite(led[k], LOW);
                noTone(pinBuz);
            }
            game_over = true;
            if (client.connected()) {
                client.publish("projetoPedro/Genius", "Você errou!");
            }
            break;
        }
        verificador++;
    }
    verificador = 0;
}


Explicação das Funções

1. setupWiFi(): Configura e conecta o ESP8266 à rede WiFi.
2. setupMQTT(): Configura o cliente MQTT com o servidor especificado.
3. reconnect(): Tenta reconectar ao broker MQTT se a conexão for perdida.
4. setup(): Configura os pinos e inicializa WiFi e MQTT.
5. loop(): Loop principal que controla o fluxo do jogo, verificando o estado dos botões e LEDs, e publicando mensagens MQTT.
6. RodadaSeguinte(): Gera a próxima rodada adicionando um novo elemento à sequência.
7. ContinuarSequencia(): Mostra a sequência de LEDs e sons ao jogador.
8. Vez

doJogador(): Verifica se o jogador reproduziu a sequência corretamente.

Como Reproduzir

1. Montagem do Circuito: Siga o diagrama de conexões para montar os LEDs, botões e buzzer no ESP8266.
2. Upload do Código: Copie o código para o Arduino IDE, configure as credenciais WiFi e MQTT, e faça o upload para o ESP8266.
3. Iniciar o Jogo: Após o upload, abra o monitor serial para ver os logs e pressione qualquer botão para iniciar o jogo.
4. Jogar: Siga a sequência de LEDs e pressione os botões correspondentes. O progresso será publicado no tópico MQTT configurado.

Esta documentação fornece todas as informações necessárias para entender, montar e executar o projeto Genius com ESP8266.
